
AVR_bluetooth.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000242  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000002b6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  00800060  00800060  000002b6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002b6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000002e8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  00000324  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000610  00000000  00000000  00000374  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000538  00000000  00000000  00000984  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000299  00000000  00000000  00000ebc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000128  00000000  00000000  00001158  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000033a  00000000  00000000  00001280  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000022d  00000000  00000000  000015ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  000017e7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	12 c0       	rjmp	.+36     	; 0x26 <__ctors_end>
   2:	67 c0       	rjmp	.+206    	; 0xd2 <__vector_1>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	ac c0       	rjmp	.+344    	; 0x160 <__vector_3>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>
  14:	18 c0       	rjmp	.+48     	; 0x46 <__bad_interrupt>
  16:	17 c0       	rjmp	.+46     	; 0x46 <__bad_interrupt>
  18:	16 c0       	rjmp	.+44     	; 0x46 <__bad_interrupt>
  1a:	15 c0       	rjmp	.+42     	; 0x46 <__bad_interrupt>
  1c:	14 c0       	rjmp	.+40     	; 0x46 <__bad_interrupt>
  1e:	13 c0       	rjmp	.+38     	; 0x46 <__bad_interrupt>
  20:	12 c0       	rjmp	.+36     	; 0x46 <__bad_interrupt>
  22:	11 c0       	rjmp	.+34     	; 0x46 <__bad_interrupt>
  24:	10 c0       	rjmp	.+32     	; 0x46 <__bad_interrupt>

00000026 <__ctors_end>:
  26:	11 24       	eor	r1, r1
  28:	1f be       	out	0x3f, r1	; 63
  2a:	cf e5       	ldi	r28, 0x5F	; 95
  2c:	d4 e0       	ldi	r29, 0x04	; 4
  2e:	de bf       	out	0x3e, r29	; 62
  30:	cd bf       	out	0x3d, r28	; 61

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a0 e6       	ldi	r26, 0x60	; 96
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a8 36       	cpi	r26, 0x68	; 104
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	cc d0       	rcall	.+408    	; 0x1dc <main>
  44:	fc c0       	rjmp	.+504    	; 0x23e <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <USART_inicjalizacja>:

volatile uint64_t interwal = 0;

void USART_inicjalizacja()
{
	UBRRH = (unsigned char) (MYUBRR >> 8); 
  48:	10 bc       	out	0x20, r1	; 32
	UBRRL = (unsigned char) (MYUBRR);
  4a:	87 e6       	ldi	r24, 0x67	; 103
  4c:	89 b9       	out	0x09, r24	; 9
	
	UCSRB = (1 << TXEN);  //zalaczone nadawanie
  4e:	88 e0       	ldi	r24, 0x08	; 8
  50:	8a b9       	out	0x0a, r24	; 10
	UCSRC =  (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);; // 8 bitow danych 1 bit stopu bez sprawdzania parzystosci
  52:	86 e8       	ldi	r24, 0x86	; 134
  54:	80 bd       	out	0x20, r24	; 32
  56:	08 95       	ret

00000058 <USART_transmisja>:
}

void USART_transmisja(uint64_t data)
{
  58:	df 92       	push	r13
  5a:	ef 92       	push	r14
  5c:	ff 92       	push	r15
  5e:	0f 93       	push	r16
  60:	1f 93       	push	r17
  62:	cf 93       	push	r28
  64:	df 93       	push	r29
  66:	d2 2e       	mov	r13, r18
  68:	e3 2e       	mov	r14, r19
  6a:	f4 2e       	mov	r15, r20
  6c:	15 2f       	mov	r17, r21
  6e:	d6 2f       	mov	r29, r22
  70:	c7 2f       	mov	r28, r23
  72:	b8 2f       	mov	r27, r24
  74:	a9 2f       	mov	r26, r25
  76:	e8 e3       	ldi	r30, 0x38	; 56
  78:	f0 e0       	ldi	r31, 0x00	; 0
	for(int i = 7; i >= 0; i--)
	{
		while(!(UCSRA & (1 << UDRE)));
  7a:	5d 9b       	sbis	0x0b, 5	; 11
  7c:	fe cf       	rjmp	.-4      	; 0x7a <USART_transmisja+0x22>
		
		UDR = (data >> i * 8); //wyslanie calej 64-bitowej danej
  7e:	2d 2d       	mov	r18, r13
  80:	3e 2d       	mov	r19, r14
  82:	4f 2d       	mov	r20, r15
  84:	51 2f       	mov	r21, r17
  86:	6d 2f       	mov	r22, r29
  88:	7c 2f       	mov	r23, r28
  8a:	8b 2f       	mov	r24, r27
  8c:	9a 2f       	mov	r25, r26
  8e:	0e 2f       	mov	r16, r30
  90:	ae d0       	rcall	.+348    	; 0x1ee <__lshrdi3>
  92:	2c b9       	out	0x0c, r18	; 12
  94:	38 97       	sbiw	r30, 0x08	; 8
	UCSRC =  (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);; // 8 bitow danych 1 bit stopu bez sprawdzania parzystosci
}

void USART_transmisja(uint64_t data)
{
	for(int i = 7; i >= 0; i--)
  96:	e8 3f       	cpi	r30, 0xF8	; 248
  98:	8f ef       	ldi	r24, 0xFF	; 255
  9a:	f8 07       	cpc	r31, r24
  9c:	71 f7       	brne	.-36     	; 0x7a <USART_transmisja+0x22>
	{
		while(!(UCSRA & (1 << UDRE)));
		
		UDR = (data >> i * 8); //wyslanie calej 64-bitowej danej
	}
}
  9e:	df 91       	pop	r29
  a0:	cf 91       	pop	r28
  a2:	1f 91       	pop	r17
  a4:	0f 91       	pop	r16
  a6:	ff 90       	pop	r15
  a8:	ef 90       	pop	r14
  aa:	df 90       	pop	r13
  ac:	08 95       	ret

000000ae <kontaktron_inicjalizacja>:

void kontaktron_inicjalizacja() //Na pinie PD2 zewnetrzne przerwanie od narastajacego zbocza kontaktronu
{
	KONTAKTRON_KIERUNEK &= ~(1 << PD2); //na PD2 wejscie
  ae:	8a 98       	cbi	0x11, 2	; 17
	KONTAKTRON_PORTY |= (1 << PD2); //rezystor podciagajacy na PD2
  b0:	92 9a       	sbi	0x12, 2	; 18
	
	MCUCR |= ((1 << ISC01) | (1 << ISC00)); //przerwanie na narastajacym zboczu PD2 (INT0)
  b2:	85 b7       	in	r24, 0x35	; 53
  b4:	83 60       	ori	r24, 0x03	; 3
  b6:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0); //wlaczanie przerwania na PD2
  b8:	8b b7       	in	r24, 0x3b	; 59
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	8b bf       	out	0x3b, r24	; 59
  be:	08 95       	ret

000000c0 <licznik2_inicjalizacja>:
}

void licznik2_inicjalizacja()
{
	TCCR2 |= (1 << WGM21 | 1 << CS22 | 1 << CS20); //tryb CTC i clk/128 
  c0:	85 b5       	in	r24, 0x25	; 37
  c2:	8d 60       	ori	r24, 0x0D	; 13
  c4:	85 bd       	out	0x25, r24	; 37
	OCR2 = 125; // wartosc do wywolania przerwania (odliczenie 1 milisekundy)
  c6:	8d e7       	ldi	r24, 0x7D	; 125
  c8:	83 bd       	out	0x23, r24	; 35
	TIMSK |= (1 << OCIE2); //odblokowanie przerwania w trybie compare match interrupt
  ca:	89 b7       	in	r24, 0x39	; 57
  cc:	80 68       	ori	r24, 0x80	; 128
  ce:	89 bf       	out	0x39, r24	; 57
  d0:	08 95       	ret

000000d2 <__vector_1>:
}

ISR(INT0_vect) //obsluga przerwania na przycisku PD2 -> stan niski
{
  d2:	1f 92       	push	r1
  d4:	0f 92       	push	r0
  d6:	0f b6       	in	r0, 0x3f	; 63
  d8:	0f 92       	push	r0
  da:	11 24       	eor	r1, r1
  dc:	2f 93       	push	r18
  de:	3f 93       	push	r19
  e0:	4f 93       	push	r20
  e2:	5f 93       	push	r21
  e4:	6f 93       	push	r22
  e6:	7f 93       	push	r23
  e8:	8f 93       	push	r24
  ea:	9f 93       	push	r25
  ec:	af 93       	push	r26
  ee:	bf 93       	push	r27
  f0:	ef 93       	push	r30
  f2:	ff 93       	push	r31
	PORTC ^= (1 << PINC0);
  f4:	95 b3       	in	r25, 0x15	; 21
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	89 27       	eor	r24, r25
  fa:	85 bb       	out	0x15, r24	; 21
	USART_transmisja(interwal);
  fc:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 100:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 104:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 108:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 10c:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 110:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 114:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
 118:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
 11c:	9d df       	rcall	.-198    	; 0x58 <USART_transmisja>
	interwal = 0;
 11e:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__DATA_REGION_ORIGIN__>
 122:	10 92 61 00 	sts	0x0061, r1	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 126:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 12a:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 12e:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 132:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 136:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
 13a:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
}
 13e:	ff 91       	pop	r31
 140:	ef 91       	pop	r30
 142:	bf 91       	pop	r27
 144:	af 91       	pop	r26
 146:	9f 91       	pop	r25
 148:	8f 91       	pop	r24
 14a:	7f 91       	pop	r23
 14c:	6f 91       	pop	r22
 14e:	5f 91       	pop	r21
 150:	4f 91       	pop	r20
 152:	3f 91       	pop	r19
 154:	2f 91       	pop	r18
 156:	0f 90       	pop	r0
 158:	0f be       	out	0x3f, r0	; 63
 15a:	0f 90       	pop	r0
 15c:	1f 90       	pop	r1
 15e:	18 95       	reti

00000160 <__vector_3>:

ISR(TIMER2_COMP_vect) //odliczenie 1 ms
{
 160:	1f 92       	push	r1
 162:	0f 92       	push	r0
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	0f 92       	push	r0
 168:	11 24       	eor	r1, r1
 16a:	2f 93       	push	r18
 16c:	3f 93       	push	r19
 16e:	4f 93       	push	r20
 170:	5f 93       	push	r21
 172:	6f 93       	push	r22
 174:	7f 93       	push	r23
 176:	8f 93       	push	r24
 178:	9f 93       	push	r25
 17a:	af 93       	push	r26
	interwal++;
 17c:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 180:	30 91 61 00 	lds	r19, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 184:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 188:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 18c:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 190:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 194:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
 198:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
 19c:	a1 e0       	ldi	r26, 0x01	; 1
 19e:	43 d0       	rcall	.+134    	; 0x226 <__adddi3_s8>
 1a0:	20 93 60 00 	sts	0x0060, r18	; 0x800060 <__DATA_REGION_ORIGIN__>
 1a4:	30 93 61 00 	sts	0x0061, r19	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1a8:	40 93 62 00 	sts	0x0062, r20	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1ac:	50 93 63 00 	sts	0x0063, r21	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 1b0:	60 93 64 00 	sts	0x0064, r22	; 0x800064 <__DATA_REGION_ORIGIN__+0x4>
 1b4:	70 93 65 00 	sts	0x0065, r23	; 0x800065 <__DATA_REGION_ORIGIN__+0x5>
 1b8:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
 1bc:	90 93 67 00 	sts	0x0067, r25	; 0x800067 <__DATA_REGION_ORIGIN__+0x7>
}
 1c0:	af 91       	pop	r26
 1c2:	9f 91       	pop	r25
 1c4:	8f 91       	pop	r24
 1c6:	7f 91       	pop	r23
 1c8:	6f 91       	pop	r22
 1ca:	5f 91       	pop	r21
 1cc:	4f 91       	pop	r20
 1ce:	3f 91       	pop	r19
 1d0:	2f 91       	pop	r18
 1d2:	0f 90       	pop	r0
 1d4:	0f be       	out	0x3f, r0	; 63
 1d6:	0f 90       	pop	r0
 1d8:	1f 90       	pop	r1
 1da:	18 95       	reti

000001dc <main>:

int main(void)
{
	kontaktron_inicjalizacja();
 1dc:	68 df       	rcall	.-304    	; 0xae <kontaktron_inicjalizacja>
	DDRC |= 0x01; //wyjscie na porcie PC0
 1de:	a0 9a       	sbi	0x14, 0	; 20
	PORTC |= 0x01; //stan wysoki na PC0
 1e0:	a8 9a       	sbi	0x15, 0	; 21
	USART_inicjalizacja();
 1e2:	32 df       	rcall	.-412    	; 0x48 <USART_inicjalizacja>
	licznik2_inicjalizacja();
 1e4:	6d df       	rcall	.-294    	; 0xc0 <licznik2_inicjalizacja>
	sei();
 1e6:	78 94       	sei
 1e8:	ff cf       	rjmp	.-2      	; 0x1e8 <main+0xc>

000001ea <__ashrdi3>:
 1ea:	97 fb       	bst	r25, 7
 1ec:	10 f8       	bld	r1, 0

000001ee <__lshrdi3>:
 1ee:	16 94       	lsr	r1
 1f0:	00 08       	sbc	r0, r0
 1f2:	0f 93       	push	r16
 1f4:	08 30       	cpi	r16, 0x08	; 8
 1f6:	98 f0       	brcs	.+38     	; 0x21e <__lshrdi3+0x30>
 1f8:	08 50       	subi	r16, 0x08	; 8
 1fa:	23 2f       	mov	r18, r19
 1fc:	34 2f       	mov	r19, r20
 1fe:	45 2f       	mov	r20, r21
 200:	56 2f       	mov	r21, r22
 202:	67 2f       	mov	r22, r23
 204:	78 2f       	mov	r23, r24
 206:	89 2f       	mov	r24, r25
 208:	90 2d       	mov	r25, r0
 20a:	f4 cf       	rjmp	.-24     	; 0x1f4 <__lshrdi3+0x6>
 20c:	05 94       	asr	r0
 20e:	97 95       	ror	r25
 210:	87 95       	ror	r24
 212:	77 95       	ror	r23
 214:	67 95       	ror	r22
 216:	57 95       	ror	r21
 218:	47 95       	ror	r20
 21a:	37 95       	ror	r19
 21c:	27 95       	ror	r18
 21e:	0a 95       	dec	r16
 220:	aa f7       	brpl	.-22     	; 0x20c <__lshrdi3+0x1e>
 222:	0f 91       	pop	r16
 224:	08 95       	ret

00000226 <__adddi3_s8>:
 226:	00 24       	eor	r0, r0
 228:	a7 fd       	sbrc	r26, 7
 22a:	00 94       	com	r0
 22c:	2a 0f       	add	r18, r26
 22e:	30 1d       	adc	r19, r0
 230:	40 1d       	adc	r20, r0
 232:	50 1d       	adc	r21, r0
 234:	60 1d       	adc	r22, r0
 236:	70 1d       	adc	r23, r0
 238:	80 1d       	adc	r24, r0
 23a:	90 1d       	adc	r25, r0
 23c:	08 95       	ret

0000023e <_exit>:
 23e:	f8 94       	cli

00000240 <__stop_program>:
 240:	ff cf       	rjmp	.-2      	; 0x240 <__stop_program>
